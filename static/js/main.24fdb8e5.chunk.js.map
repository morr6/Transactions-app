{"version":3,"sources":["utilities/GlobalStyles.ts","storage/LocalStorage.ts","homepage/Homepage.s.ts","utilities/Theme.ts","app/components/button/Button.s.ts","app/components/button/Button.tsx","currencyRate/CurrenctRate.s.ts","utilities/api/RateApi.ts","app/selectors/selectors.ts","currencyRate/CurrencyRate.tsx","utilities/api/Actions.ts","utilities/api/Types.ts","currencyRate/Actions.ts","currencyRate/Types.ts","transactionList/TransactionList.s.ts","transactionList/components/transaction/Transaction.s.ts","transactionList/components/transaction/Transaction.tsx","transactionList/components/transaction/Actions.ts","transactionList/components/transaction/Types.ts","transactionList/TransactionList.tsx","transactionModal/TransactionModal.s.ts","transactionModal/Actions.ts","transactionModal/Types.ts","utilities/dateHandler.ts","transactionModal/TransactionModal.tsx","mostExpensiveTransaction/mostExpensiveTransaction.s.ts","mostExpensiveTransaction/mostExpensiveTransaction.tsx","homepage/Homepage.tsx","homepage/Actions.ts","homepage/Types.ts","app/App.tsx","serviceWorker.js","transactionModal/Reducers.ts","transactionList/components/transaction/Reducers.ts","store/RootReducers.ts","currencyRate/Reducers.ts","utilities/api/Reducers.ts","homepage/Reducers.ts","index.js"],"names":["GlobalStyle","createGlobalStyle","window","outerHeight","innerWidth","getTransactionsFromStorage","JSON","parse","localStorage","getItem","generateTransactionId","transactions","length","id","GridWrapper","styled","Grid","Theme","colors","primaryColor","indigo","secondaryColor","grey","white","primaryGrey","darkBlue","fontSize","extraSmall","small","medium","large","extraLarge","fontFamily","fontWeight","normal","regular","semiBold","bold","boldest","MuiTheme","createMuiTheme","palette","primary","main","secondary","StyledButton","Button","text","color","fullWidth","click","variant","onClick","Title","h2","Rate","p","getPlnRate","fetchApi","axios","get","then","res","selectPlnRate","store","plnRate","selectIsModalOpen","isModalOpen","selectTransactions","selectDeleteMode","deleteMode","selectIdsToDeleteArray","idsToDelete","CurrencyRate","dispatch","useDispatch","useSelector","useEffect","type","rate","parseFloat","data","rates","PLN","toFixed","setPlnRate","ListWrapper","div","innerHeight","Header","NameWrapper","span","SumValue","TransitionWrapper","css","shouldBeDeleted","Transaction","transaction","name","euroValue","date","indexOf","addIdToDeleteArray","deleteTransactionIdFromArray","addTransactionIdToDelete","container","item","xs","Number","TransactionList","useState","page","setPage","pageCount","Math","ceil","updateCurrentPage","countTransactionsSum","sum","map","start","end","slice","slicedTransactions","key","Pagination","count","size","onChange","_","handlePageChange","ModalContent","Form","form","Input","TextField","StyledFormControl","FormControl","ButtonsWrapper","addTransitions","setDate","newDate","Date","dayOfTheWeek","getDay","month","getMonth","year","getFullYear","getDate","TransactionModal","transition","setTransition","toggleModal","onInputChange","event","target","value","Modal","open","onClose","label","InputLabel","htmlFor","OutlinedInput","startAdornment","InputAdornment","position","labelWidth","isEmpty","some","newName","charAt","toUpperCase","setItem","stringify","addTransactionToStorage","TransactionWrapper","MostExpensiveTransaction","getMostExpensiveTransaction","filter","max","el","alignItems","justify","renderTransaction","Homepage","spacing","md","sm","idsToRemove","includes","App","Boolean","location","hostname","match","initialState","modal","rootReducer","combineReducers","state","action","isApiLoading","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24fdb8e5.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n      font-size: 62.5%;\r\n      font-family: 'KoHo', sans-serif;\r\n  }\r\n\r\n   body {\r\n    overflow: hidden;\r\n    margin: 0;\r\n    max-height: ${window.outerHeight}px;\r\n    max-width: ${window.innerWidth}px;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    background: linear-gradient(\r\n      to bottom right,\r\n      rgba(0, 0, 0, .15),\r\n      rgba(0, 0, 0, .0),\r\n      rgba(0, 0, 0, .15)\r\n    );\r\n    background-repeat: no-repeat;\r\n  }\r\n  \r\n  button {\r\n      cursor: pointer;\r\n  }\r\n`;\r\n","import { transaction as transitionProps } from \"app/selectors/selectors\";\r\n\r\nexport const getTransactionsFromStorage = () => {\r\n  let transactions = JSON.parse(localStorage.getItem(\"transactions\") as string);\r\n\r\n  return transactions;\r\n};\r\n\r\nexport const initLocalStorage = (): void => {\r\n  if (!getTransactionsFromStorage()) {\r\n    localStorage.setItem(\"transactions\", JSON.stringify([]));\r\n  }\r\n};\r\n\r\nexport const generateTransactionId = (): number => {\r\n  let transactions = getTransactionsFromStorage();\r\n  return transactions.length ? transactions[0].id + 1 : 1;\r\n};\r\n\r\nexport const addTransactionToStorage = ({\r\n  name,\r\n  euroValue,\r\n  date,\r\n}: transitionProps): void => {\r\n  const newName = name.charAt(0).toUpperCase() + name.slice(1);\r\n\r\n  localStorage.setItem(\r\n    \"transactions\",\r\n    JSON.stringify([\r\n      {\r\n        id: getTransactionsFromStorage() && generateTransactionId(),\r\n        name: newName,\r\n        euroValue: euroValue,\r\n        date: date,\r\n      },\r\n      ...getTransactionsFromStorage(),\r\n    ])\r\n  );\r\n};\r\n\r\nexport const deleteTransactionFromStorage = (idsToRemove: number[]): void => {\r\n  localStorage.setItem(\r\n    \"transactions\",\r\n    JSON.stringify(\r\n      getTransactionsFromStorage().filter(\r\n        (transaction: transitionProps) =>\r\n          !idsToRemove.includes(transaction.id || 1)\r\n      )\r\n    )\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport const GridWrapper = styled(Grid)`\r\n  padding: 3rem 0 20rem 0;\r\n  overflow: hidden;\r\n`;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nexport const Theme = {\r\n  colors: {\r\n    primaryColor: indigo[600],\r\n    secondaryColor: grey[800],\r\n    white: \"#ffffff\",\r\n    primaryGrey: \"#8D8D8D\",\r\n    darkBlue: \"#15151B\",\r\n  },\r\n  fontSize: {\r\n    extraSmall: \"1rem\",\r\n    small: \"1.2rem\",\r\n    medium: \"1.4rem\",\r\n    large: \"2rem\",\r\n    extraLarge: \"4rem\",\r\n  },\r\n  fontFamily: {},\r\n  fontWeight: {\r\n    normal: 400,\r\n    regular: 500,\r\n    semiBold: 600,\r\n    bold: 700,\r\n    boldest: 900,\r\n  },\r\n};\r\n\r\nexport const MuiTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: Theme.colors.primaryColor,\r\n    },\r\n    secondary: {\r\n      main: Theme.colors.secondaryColor,\r\n    },\r\n  },\r\n});\r\n","import styled from \"styled-components\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Theme } from \"utilities/Theme\";\r\n\r\nexport const StyledButton = styled(Button)`\r\n  & > span {\r\n    min-width: 20rem;\r\n    font-size: ${Theme.fontSize.medium};\r\n    font-weight: ${Theme.fontWeight.regular};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledButton } from \"./Button.s\";\r\n\r\ninterface Props {\r\n  text: string;\r\n  color?: \"default\" | \"inherit\" | \"primary\" | \"secondary\" | undefined;\r\n  fullWidth?: boolean;\r\n  click: (event?: MouseEvent) => void;\r\n}\r\n\r\nexport const Button: React.FC<Props> = ({\r\n  text,\r\n  color,\r\n  fullWidth,\r\n  click,\r\n}: Props) => {\r\n  return (\r\n    <StyledButton\r\n      fullWidth={fullWidth}\r\n      variant=\"outlined\"\r\n      color={color || \"primary\"}\r\n      onClick={() => click()}\r\n    >\r\n      {text}\r\n    </StyledButton>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { Theme } from \"utilities/Theme\";\r\n\r\nexport const Title = styled.h2`\r\n  color: ${Theme.colors.primaryColor};\r\n`;\r\n\r\nexport const Rate = styled.p`\r\n  color: ${Theme.colors.primaryColor};\r\n  font-size: ${Theme.fontSize.extraLarge};\r\n  margin: 0;\r\n`;\r\n","import axios from \"axios\";\r\n\r\nconst url: string = \"https://api.exchangeratesapi.io/latest/\";\r\n\r\nexport const plnRate = () => {\r\n  const fetchApi = (): Promise<any> => {\r\n    return axios.get(url).then((res: any) => res);\r\n  };\r\n\r\n  return {\r\n    fetchApi,\r\n  };\r\n};\r\n\r\nexport const getPlnRate = plnRate();\r\n","export interface transaction {\r\n  name: string;\r\n  euroValue: number;\r\n  date?: string;\r\n  id?: number;\r\n}\r\n\r\ninterface Store {\r\n  plnRate: number;\r\n  isApiLoading: boolean;\r\n  isModalOpen: boolean;\r\n  transactions: transaction[];\r\n  deleteMode: boolean;\r\n  idsToDelete: number[];\r\n}\r\n\r\nexport const selectPlnRate = (store: Store) => store.plnRate;\r\nexport const selectApiLoading = (store: Store) => store.isApiLoading;\r\nexport const selectIsModalOpen = (store: Store) => store.isModalOpen;\r\nexport const selectTransactions = (store: Store) => store.transactions;\r\nexport const selectDeleteMode = (store: Store) => store.deleteMode;\r\nexport const selectIdsToDeleteArray = (store: Store) => store.idsToDelete;\r\n","import React, { useEffect } from 'react';\r\nimport { Title, Rate } from './CurrenctRate.s';\r\nimport { getPlnRate } from 'utilities/api/RateApi';\r\nimport { toogleApiLoading } from 'utilities/api/Actions';\r\nimport { setPlnRate } from './Actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectPlnRate } from 'app/selectors/selectors';\r\n\r\nexport const CurrencyRate: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const plnRate = useSelector(selectPlnRate);\r\n\r\n  const setRateToStore = () => {\r\n    dispatch(toogleApiLoading());\r\n\r\n    getPlnRate.fetchApi().then((res: any) => {\r\n      const rate = parseFloat(res.data.rates.PLN.toFixed(2));\r\n\r\n      dispatch(setPlnRate(rate));\r\n      dispatch(toogleApiLoading());\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRateToStore();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Title>current PLN exchange rate</Title>\r\n      <Rate>1€ = {plnRate} PLN</Rate>\r\n    </>\r\n  );\r\n};\r\n","import { TOOGLE_API_LOADING, apiLoadingType } from \"./Types\";\r\n\r\nexport const toogleApiLoading = (): apiLoadingType => ({\r\n  type: TOOGLE_API_LOADING,\r\n});\r\n","export const TOOGLE_API_LOADING = \"TOOGLE_API_LOADING\";\r\n\r\ninterface toogleApiLoading {\r\n  type: typeof TOOGLE_API_LOADING;\r\n}\r\n\r\nexport type apiLoadingType = toogleApiLoading;\r\n","import { RateActionType, SET_PLN_RATE } from \"./Types\";\r\n\r\nexport const setPlnRate = (plnRate: number): RateActionType => ({\r\n  type: SET_PLN_RATE,\r\n  plnRate,\r\n});\r\n","export const SET_PLN_RATE = \"SET_PLN_RATE\";\r\n\r\ninterface setRate {\r\n  type: typeof SET_PLN_RATE;\r\n  plnRate: number;\r\n}\r\n\r\nexport type RateActionType = setRate;\r\n","import styled from 'styled-components';\r\nimport { Theme } from 'utilities/Theme';\r\n\r\nexport const ListWrapper = styled.div`\r\n  height: ${window.innerHeight / 2}px;\r\n  margin-bottom: 2rem;\r\n  border-bottom: 1px solid ${Theme.colors.secondaryColor};\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  font-size: ${Theme.fontSize.medium};\r\n  color: ${Theme.colors.secondaryColor};\r\n  border-bottom: 1px solid ${Theme.colors.secondaryColor};\r\n\r\n  margin-top: 1rem;\r\n  padding-bottom: 1rem;\r\n`;\r\n\r\nexport const NameWrapper = styled.span`\r\n  padding: 0 1rem;\r\n`;\r\n\r\nexport const SumValue = styled.span`\r\n  font-size: ${Theme.fontSize.large};\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\nimport { Theme } from \"utilities/Theme\";\r\n\r\ninterface TransitionWrapper {\r\n  deleteMode: boolean;\r\n  shouldBeDeleted: boolean;\r\n}\r\n\r\nexport const TransitionWrapper = styled.div`\r\n  padding: 2rem 1rem;\r\n  margin: 1rem 0;\r\n  transition: 0.5s;\r\n  cursor: pointer;\r\n  color: ${Theme.colors.secondaryColor};\r\n  font-size: ${Theme.fontSize.large};\r\n\r\n  &:hover {\r\n    background: ${Theme.colors.primaryColor};\r\n    color: ${Theme.colors.white};\r\n  }\r\n\r\n  ${({ deleteMode }: TransitionWrapper) =>\r\n    deleteMode &&\r\n    css`\r\n      background: ${Theme.colors.primaryColor};\r\n      color: ${Theme.colors.white};\r\n    `}\r\n\r\n  ${({ shouldBeDeleted }: TransitionWrapper) =>\r\n    shouldBeDeleted &&\r\n    css`\r\n      transform: scale(0.9);\r\n      color: ${Theme.colors.white};\r\n      background: rgba(255, 50, 50);\r\n    `}\r\n`;\r\n","import React from 'react';\r\nimport { TransitionWrapper } from './Transaction.s';\r\nimport { Grid } from '@material-ui/core';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addIdToDeleteArray, deleteTransactionIdFromArray } from './Actions';\r\nimport {\r\n  transaction,\r\n  selectPlnRate,\r\n  selectDeleteMode,\r\n  selectIdsToDeleteArray,\r\n} from 'app/selectors/selectors';\r\n\r\ninterface Props {\r\n  transaction: transaction;\r\n}\r\n\r\nexport const Transaction: React.FC<Props> = ({ transaction }: Props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const plnRate = useSelector(selectPlnRate);\r\n  const deleteMode = useSelector(selectDeleteMode);\r\n  const idsToDelete = useSelector(selectIdsToDeleteArray);\r\n\r\n  const addTransactionIdToDelete = (id: any): void => {\r\n    if (deleteMode) {\r\n      if (idsToDelete.indexOf(id) === -1) dispatch(addIdToDeleteArray(id));\r\n      else dispatch(deleteTransactionIdFromArray(id));\r\n    }\r\n  };\r\n\r\n  const { name, euroValue, date, id } = transaction;\r\n  return (\r\n    <TransitionWrapper\r\n      shouldBeDeleted={idsToDelete.indexOf(id as number) !== -1}\r\n      deleteMode={deleteMode}\r\n      onClick={() => addTransactionIdToDelete(id)}\r\n    >\r\n      <Grid container>\r\n        <Grid item xs={6}>\r\n          {name}\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {Number(euroValue).toFixed(2)} EUR\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {(euroValue * plnRate).toFixed(2)} PLN\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          {date}\r\n        </Grid>\r\n      </Grid>\r\n    </TransitionWrapper>\r\n  );\r\n};\r\n","import {\r\n  idToDeleteArrayTypes,\r\n  ADD_TRANSACTION_ID_TO_DELETE,\r\n  DELETE_TRANSACTION_ID_FROM_TABLE,\r\n  CLEAR_ID_TABLE,\r\n} from \"./Types\";\r\n\r\nexport const addIdToDeleteArray = (id: number): idToDeleteArrayTypes => ({\r\n  type: ADD_TRANSACTION_ID_TO_DELETE,\r\n  id,\r\n});\r\n\r\nexport const deleteTransactionIdFromArray = (\r\n  id: number\r\n): idToDeleteArrayTypes => ({\r\n  type: DELETE_TRANSACTION_ID_FROM_TABLE,\r\n  id,\r\n});\r\n\r\nexport const clearIdTable = () => ({\r\n  type: CLEAR_ID_TABLE,\r\n});\r\n","export const ADD_TRANSACTION_ID_TO_DELETE = \"ADD_TRANSACTION_ID_TO_DELETE\";\r\nexport const DELETE_TRANSACTION_ID_FROM_TABLE =\r\n  \"DELETE_TRANSACTION_ID_FROM_TABLE\";\r\nexport const CLEAR_ID_TABLE = \"CLEAR_ID_TABLE\";\r\n\r\ninterface addToDelete {\r\n  type: typeof ADD_TRANSACTION_ID_TO_DELETE;\r\n  id: number;\r\n}\r\n\r\ninterface deleteFromTable {\r\n  type: typeof DELETE_TRANSACTION_ID_FROM_TABLE;\r\n  id: number;\r\n}\r\n\r\ninterface clearTable {\r\n  type: typeof CLEAR_ID_TABLE;\r\n}\r\n\r\nexport type idToDeleteArrayTypes = addToDelete | deleteFromTable | clearTable;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { Grid } from '@material-ui/core';\r\nimport { ListWrapper, Header, NameWrapper, SumValue } from './TransactionList.s';\r\nimport { Transaction } from './components/transaction/Transaction';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTransactions, transaction, selectPlnRate } from 'app/selectors/selectors';\r\n\r\nexport const TransactionList: React.FC = () => {\r\n  const transactions = useSelector(selectTransactions);\r\n  const plnRate = useSelector(selectPlnRate);\r\n\r\n  const [page, setPage] = useState<number>(1);\r\n\r\n  useEffect(() => {\r\n    const updateCurrentPage = () => {\r\n      const pageCount: number = Math.ceil(transactions.length / 6);\r\n\r\n      if (page > pageCount && pageCount !== 0) {\r\n        setPage(pageCount);\r\n      }\r\n    };\r\n\r\n    updateCurrentPage();\r\n  }, [transactions]);\r\n\r\n  const slicedTransactions = (): Array<transaction> => {\r\n    const start: number = page === 1 ? 0 : (page - 1) * 6;\r\n    const end: number = start + 6;\r\n\r\n    return transactions.slice(start, end);\r\n  };\r\n\r\n  const handlePageChange = (page: number): void => {\r\n    setPage(page);\r\n  };\r\n\r\n  const countTransactionsSum = (): number => {\r\n    let sum: number = 0;\r\n\r\n    transactions.map((transaction) => (sum += Number(transaction.euroValue)));\r\n\r\n    return sum;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <NameWrapper>NAME</NameWrapper>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            EUR\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            PLN\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            DATE\r\n          </Grid>\r\n        </Grid>\r\n      </Header>\r\n\r\n      <ListWrapper>\r\n        {slicedTransactions().map((transaction, key) => (\r\n          <Transaction transaction={transaction} key={key} />\r\n        ))}\r\n      </ListWrapper>\r\n\r\n      <Grid container>\r\n        <Grid item xs={6}>\r\n          <Pagination\r\n            count={Math.ceil(transactions.length / 6) || 1}\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            page={page}\r\n            onChange={(_, page) => handlePageChange(page)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <SumValue>{countTransactionsSum().toFixed(2)} EUR</SumValue>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <SumValue>{(countTransactionsSum() * plnRate).toFixed(2)} PLN</SumValue>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { Theme } from \"utilities/Theme\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nexport const ModalContent = styled.div`\r\n  width: 25%;\r\n  padding: 3rem 5rem;\r\n  background: white;\r\n\r\n  margin: auto;\r\n  margin-top: 10rem;\r\n  text-align: center;\r\n  border-radius: 0.5rem;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  font-size: ${Theme.fontSize.large};\r\n  color: ${Theme.colors.secondaryColor};\r\n  padding-bottom: 1rem;\r\n  margin: auto;\r\n  width: 50%;\r\n  border-bottom: 2px solid rgb(81, 68, 255);\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  height: 30rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  padding: 5rem 0 2rem 0;\r\n\r\n  & > input[type=\"number\"] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  & > input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const Input = styled(TextField)`\r\n  & label,\r\n  input {\r\n    font-size: ${Theme.fontSize.medium};\r\n  }\r\n\r\n  & .Mui-focused {\r\n    color: rgb(81, 68, 255) !important;\r\n  }\r\n`;\r\n\r\nexport const StyledFormControl = styled(FormControl)`\r\n  & p,\r\n  label,\r\n  input {\r\n    font-size: ${Theme.fontSize.medium};\r\n  }\r\n\r\n  & .Mui-focused {\r\n    color: rgb(81, 68, 255) !important;\r\n    & p {\r\n      color: rgb(81, 68, 255) !important;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  border-radius: 0.5rem;\r\n  padding: 1rem;\r\n`;\r\n","import { TOOGLE_MODAL, ADD_TRANSACTIONS, transactionsTypes } from './Types';\r\nimport { transaction } from 'app/selectors/selectors';\r\n\r\nexport const toogleModal = (): transactionsTypes => ({\r\n  type: TOOGLE_MODAL,\r\n});\r\n\r\nexport const addTransitions = (transactions: transaction[]): transactionsTypes => ({\r\n  type: ADD_TRANSACTIONS,\r\n  transactions,\r\n});\r\n","import { transaction } from 'app/selectors/selectors';\r\n\r\nexport const TOOGLE_MODAL = 'TOOGLE_MODAL';\r\nexport const ADD_TRANSACTIONS = 'ADD_TRANSACTIONS';\r\n\r\ninterface toogleModal {\r\n  type: typeof TOOGLE_MODAL;\r\n}\r\n\r\ninterface addTransitions {\r\n  type: typeof ADD_TRANSACTIONS;\r\n  transactions: transaction[];\r\n}\r\n\r\nexport type transactionsTypes = toogleModal | addTransitions;\r\n","export const setDate = (): string => {\r\n  let newDate = new Date();\r\n  let dayOfTheWeek = getDay();\r\n  const day = () => {\r\n    return newDate.getDate() > 9 ? newDate.getDate() : \"0\" + newDate.getDate();\r\n  };\r\n  let month = newDate.getMonth() + 1;\r\n  let year = newDate.getFullYear();\r\n\r\n  let today = dayOfTheWeek + \". \" + day() + \".0\" + month + \".\" + year;\r\n\r\n  return today;\r\n};\r\n\r\nconst getDay = (): string | undefined => {\r\n  let today = new Date().getDay();\r\n\r\n  switch (today) {\r\n    case 0:\r\n      return \"Sun\";\r\n    case 1:\r\n      return \"Mon\";\r\n    case 2:\r\n      return \"Tue\";\r\n    case 3:\r\n      return \"Wed\";\r\n    case 4:\r\n      return \"Thu\";\r\n    case 5:\r\n      return \"Fri\";\r\n    case 6:\r\n      return \"Sat\";\r\n    default:\r\n      return;\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  ModalContent,\r\n  Title,\r\n  Form,\r\n  Input,\r\n  StyledFormControl,\r\n  ButtonsWrapper,\r\n} from './TransactionModal.s';\r\n\r\nimport _ from 'lodash';\r\nimport { getTransactionsFromStorage, addTransactionToStorage } from 'storage/LocalStorage';\r\n\r\nimport { Button } from 'app/components/button/Button';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toogleModal, addTransitions } from 'transactionModal/Actions';\r\n\r\nimport { setDate } from 'utilities/dateHandler';\r\n\r\nimport { selectIsModalOpen, transaction as transitionType } from 'app/selectors/selectors';\r\n\r\nexport const TransactionModal: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const isModalOpen = useSelector(selectIsModalOpen);\r\n\r\n  const [transition, setTransition] = useState<transitionType>({\r\n    name: '',\r\n    euroValue: 0,\r\n    date: setDate(),\r\n  });\r\n\r\n  const toggleModal = (): void => {\r\n    dispatch(toogleModal());\r\n  };\r\n\r\n  const onInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  ): void => {\r\n    setTransition({\r\n      ...transition,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const clearState = (): void => {\r\n    setTransition({\r\n      name: '',\r\n      euroValue: 0,\r\n      date: setDate(),\r\n    });\r\n  };\r\n\r\n  const addTransaction = (): void => {\r\n    if (!_.isEmpty(transition) && !_.some(transition, _.isEmpty)) {\r\n      addTransactionToStorage(transition);\r\n      dispatch(addTransitions(getTransactionsFromStorage()));\r\n      dispatch(toogleModal());\r\n\r\n      clearState();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={isModalOpen} onClose={toggleModal}>\r\n      <ModalContent>\r\n        <Title>Add new transaction</Title>\r\n\r\n        <Form>\r\n          <Input\r\n            fullWidth\r\n            id=\"outlined-basic\"\r\n            variant=\"outlined\"\r\n            label=\"Transition name\"\r\n            onChange={(event) => onInputChange(event)}\r\n            name=\"name\"\r\n          />\r\n\r\n          <StyledFormControl fullWidth variant=\"outlined\">\r\n            <InputLabel htmlFor=\"outlined-adornment-amount\">Value</InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-amount\"\r\n              startAdornment={<InputAdornment position=\"start\">€</InputAdornment>}\r\n              labelWidth={40}\r\n              onChange={(event) => onInputChange(event)}\r\n              name=\"euroValue\"\r\n              type=\"number\"\r\n            />\r\n          </StyledFormControl>\r\n\r\n          <ButtonsWrapper>\r\n            <Button text=\"add transaction\" click={addTransaction} />\r\n            <Button text=\"cancel\" click={toggleModal} />\r\n          </ButtonsWrapper>\r\n        </Form>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\nimport { Theme } from 'utilities/Theme';\r\n\r\nexport const Title = styled.h2`\r\n  color: ${Theme.colors.primaryColor};\r\n`;\r\n\r\nexport const TransactionWrapper = styled.p`\r\n  color: ${Theme.colors.primaryColor};\r\n  font-size: ${Theme.fontSize.large};\r\n  margin: 0;\r\n`;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { Title, TransactionWrapper } from './mostExpensiveTransaction.s';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTransactions, selectPlnRate } from 'app/selectors/selectors';\r\nimport { transaction } from 'app/selectors/selectors';\r\n\r\nexport const MostExpensiveTransaction: React.FC = () => {\r\n  const transactions = useSelector(selectTransactions);\r\n  const plnRate = useSelector(selectPlnRate);\r\n\r\n  const getMostExpensiveTransaction = (): transaction => {\r\n    return (\r\n      transactions &&\r\n      transactions.filter(\r\n        (transaction) =>\r\n          Number(transaction.euroValue) === Math.max(...transactions.map((el) => el.euroValue)),\r\n      )[0]\r\n    );\r\n  };\r\n\r\n  const renderTransaction = () => {\r\n    if (getMostExpensiveTransaction()) {\r\n      const { name, euroValue, date } = getMostExpensiveTransaction();\r\n\r\n      return (\r\n        <Grid container alignItems=\"center\" justify=\"space-around\">\r\n          <Grid item xs={6}>\r\n            {name}\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            {Number(euroValue).toFixed(2)} EUR\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            {Number(euroValue * plnRate).toFixed(2)} PLN\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            {date}\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Title>most expensive transaction</Title>\r\n      <TransactionWrapper>{renderTransaction()}</TransactionWrapper>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GridWrapper } from './Homepage.s';\r\n\r\nimport { Button } from 'app/components/button/Button';\r\nimport { CurrencyRate } from 'currencyRate/CurrencyRate';\r\nimport { TransactionList } from 'transactionList/TransactionList';\r\nimport { TransactionModal } from 'transactionModal/TransactionModal';\r\nimport { MostExpensiveTransaction } from 'mostExpensiveTransaction/mostExpensiveTransaction';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toogleModal, addTransitions } from 'transactionModal/Actions';\r\nimport { toogleDeleteMode } from './Actions';\r\nimport { selectDeleteMode, selectIdsToDeleteArray } from 'app/selectors/selectors';\r\n\r\nimport { clearIdTable } from 'transactionList/components/transaction/Actions';\r\nimport { deleteTransactionFromStorage, getTransactionsFromStorage } from 'storage/LocalStorage';\r\n\r\nexport const Homepage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const deleteMode = useSelector(selectDeleteMode);\r\n  const idsToDelete = useSelector(selectIdsToDeleteArray);\r\n\r\n  const toogleModalHandler = (): void => {\r\n    dispatch(toogleModal());\r\n  };\r\n\r\n  const toogleDeleteModeHandler = (): void => {\r\n    dispatch(toogleDeleteMode());\r\n    dispatch(clearIdTable());\r\n  };\r\n\r\n  const deleteTransaction = (): void => {\r\n    deleteTransactionFromStorage(idsToDelete);\r\n    dispatch(addTransitions(getTransactionsFromStorage()));\r\n    dispatch(clearIdTable());\r\n    dispatch(toogleDeleteMode());\r\n  };\r\n\r\n  return (\r\n    <GridWrapper container alignItems=\"center\" justify=\"center\" spacing={5}>\r\n      <Grid item xs={3}>\r\n        <CurrencyRate />\r\n      </Grid>\r\n\r\n      <Grid item xs={5} container>\r\n        <Grid item md={3} />\r\n        <Grid item sm={4}>\r\n          <Button\r\n            text={deleteMode ? 'confirm' : 'add'}\r\n            fullWidth\r\n            click={deleteMode ? deleteTransaction : toogleModalHandler}\r\n          />\r\n        </Grid>\r\n        <Grid item md={1} />\r\n        <Grid item sm={4}>\r\n          <Button\r\n            text={deleteMode ? 'cancel' : 'delete'}\r\n            fullWidth\r\n            click={toogleDeleteModeHandler}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={8}>\r\n        <TransactionList />\r\n      </Grid>\r\n\r\n      <Grid item xs={8}>\r\n        <MostExpensiveTransaction />\r\n      </Grid>\r\n\r\n      <TransactionModal />\r\n    </GridWrapper>\r\n  );\r\n};\r\n","import { deleteModeType, TOOGLE_DELETE_MODE } from \"./Types\";\r\n\r\nexport const toogleDeleteMode = (): deleteModeType => ({\r\n  type: TOOGLE_DELETE_MODE,\r\n});\r\n","export const TOOGLE_DELETE_MODE = \"TOOGLE_DELETE_MODE\";\r\n\r\ninterface deleteMode {\r\n  type: typeof TOOGLE_DELETE_MODE;\r\n}\r\n\r\nexport type deleteModeType = deleteMode;\r\n","import React, { useEffect } from 'react';\nimport { GlobalStyle } from 'utilities/GlobalStyles';\nimport { initLocalStorage } from 'storage/LocalStorage';\nimport { Homepage } from 'homepage/Homepage';\n\nimport { useDispatch } from 'react-redux';\nimport { addTransitions } from 'transactionModal/Actions';\nimport { getTransactionsFromStorage } from 'storage/LocalStorage';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    initLocalStorage();\n    dispatch(addTransitions(getTransactionsFromStorage()));\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Homepage />\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TOOGLE_MODAL, ADD_TRANSACTIONS, transactionsTypes } from \"./Types\";\r\n\r\nconst initialState = {\r\n  modal: false,\r\n  transactions: [],\r\n};\r\n\r\nexport const isModalOpen = (\r\n  state = initialState.modal,\r\n  action: transactionsTypes\r\n) => {\r\n  switch (action.type) {\r\n    case TOOGLE_MODAL:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const transactions = (\r\n  state = initialState.transactions,\r\n  action: transactionsTypes\r\n) => {\r\n  switch (action.type) {\r\n    case ADD_TRANSACTIONS:\r\n      return action.transactions;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  idToDeleteArrayTypes,\r\n  ADD_TRANSACTION_ID_TO_DELETE,\r\n  DELETE_TRANSACTION_ID_FROM_TABLE,\r\n  CLEAR_ID_TABLE,\r\n} from \"./Types\";\r\n\r\nconst initialState: number[] = [];\r\n\r\nexport const idsToDelete = (\r\n  state = initialState,\r\n  action: idToDeleteArrayTypes\r\n) => {\r\n  switch (action.type) {\r\n    case ADD_TRANSACTION_ID_TO_DELETE:\r\n      return [...state, action.id];\r\n    case DELETE_TRANSACTION_ID_FROM_TABLE:\r\n      return state.filter((id) => id !== action.id);\r\n    case CLEAR_ID_TABLE:\r\n      return state.filter((id) => !id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { plnRate } from 'currencyRate/Reducers';\r\nimport { isModalOpen, transactions } from 'transactionModal/Reducers';\r\nimport { isApiLoading } from 'utilities/api/Reducers';\r\nimport { deleteMode } from 'homepage/Reducers';\r\nimport { idsToDelete } from 'transactionList/components/transaction/Reducers';\r\n\r\nexport const rootReducer = combineReducers({\r\n  plnRate,\r\n  isApiLoading,\r\n  isModalOpen,\r\n  transactions,\r\n  deleteMode,\r\n  idsToDelete,\r\n});\r\n","import { SET_PLN_RATE, RateActionType } from \"./Types\";\r\n\r\nconst initialState: number = 0;\r\n\r\nexport const plnRate = (state = initialState, action: RateActionType) => {\r\n  switch (action.type) {\r\n    case SET_PLN_RATE:\r\n      return action.plnRate;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { TOOGLE_API_LOADING, apiLoadingType } from \"./Types\";\r\n\r\nconst initialState: boolean = false;\r\n\r\nexport const isApiLoading = (state = initialState, action: apiLoadingType) => {\r\n  switch (action.type) {\r\n    case TOOGLE_API_LOADING:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { TOOGLE_DELETE_MODE, deleteModeType } from \"./Types\";\r\n\r\nconst initialState: boolean = false;\r\n\r\nexport const deleteMode = (state = initialState, action: deleteModeType) => {\r\n  switch (action.type) {\r\n    case TOOGLE_DELETE_MODE:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from 'app/App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { rootReducer } from 'store/RootReducers'\n\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport { MuiTheme } from 'utilities/Theme'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={MuiTheme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}